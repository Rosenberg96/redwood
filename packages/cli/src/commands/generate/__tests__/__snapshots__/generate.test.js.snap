// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate component files 1`] = `
Object {
  "/path/to/project/web/src/components/Button/Button.js": "const Button = () => {
  return (
    <div>
      <h2>{'Button'}</h2>
      <p>{'Find me in ./web/src/components/Button/Button.js'}</p>
    </div>
  )
}

export default Button
",
  "/path/to/project/web/src/components/Button/Button.test.js": "import { render, cleanup } from '@testing-library/react'

import Button from './Button'

describe('Button', () => {
  afterEach(() => {
    cleanup()
  })
  it('renders successfully', () => {
    expect(() => {
      render(<Button />)
    }).not.toThrow()
  })
})
",
}
`;

exports[`generate layout files 1`] = `
Object {
  "/path/to/project/web/src/layouts/MainNavigationLayout/MainNavigationLayout.js": "const MainNavigationLayout = ({ children }) => {
  return <>{children}</>
}

export default MainNavigationLayout
",
  "/path/to/project/web/src/layouts/MainNavigationLayout/MainNavigationLayout.test.js": "import { render, cleanup } from '@testing-library/react'

import MainNavigationLayout from './MainNavigationLayout'

describe('MainNavigationLayout', () => {
  afterEach(() => {
    cleanup()
  })
  it('renders successfully', () => {
    expect(() => {
      render(<MainNavigationLayout />)
    }).not.toThrow()
  })
})
",
}
`;

exports[`generate page files 1`] = `
Object {
  "/path/to/project/web/src/pages/HomePage/HomePage.js": "const HomePage = () => {
  return (
    <div>
      <h1>HomePage</h1>
      <p>Find me in ./web/src/pages/HomePage/HomePage.js</p>
    </div>
  )
}

export default HomePage
",
  "/path/to/project/web/src/pages/HomePage/HomePage.test.js": "import { render, cleanup } from '@testing-library/react'

import HomePage from './HomePage'

describe('HomePage', () => {
  afterEach(() => {
    cleanup()
  })
  it('renders successfully', () => {
    expect(() => {
      render(<HomePage />)
    }).not.toThrow()
  })
})
",
}
`;

exports[`generate page routes 1`] = `
Array [
  "<Route path=\\"/home\\" page={HomePage} name=\\"home\\" />",
]
`;

exports[`generate scaffold files 1`] = `
Object {
  "/path/to/project/api/src/graphql/posts.sdl.js": "export const schema = gql\`
  type Post {
    id: Int!
    title: String!
    slug: String!
    author: String!
    body: String!
    image: String
    tags: Tag
    postedAt: DateTime
  }

  type Query {
    posts: [Post]
    post(id: Int!): Post
  }

  input PostInput {
    title: String
    slug: String
    author: String
    body: String
    image: String
    postedAt: DateTime
  }

  type Mutation {
    createPost(input: PostInput!): Post
    updatePost(id: Int!, input: PostInput!): Post
    deletePost(id: Int!): Post
  }
\`
",
  "/path/to/project/api/src/services/posts/posts.js": "import { db } from 'src/lib/db'

export const posts = () => {
  return db.post.findMany()
}

export const post = ({ id }) => {
  return db.post.findOne({
    where: { id },
  })
}

export const createPost = ({ input }) => {
  return db.post.create({
    data: input,
  })
}

export const updatePost = ({ id, input }) => {
  return db.post.update({
    data: input,
    where: { id },
  })
}

export const deletePost = ({ id }) => {
  return db.post.delete({
    where: { id },
  })
}
",
  "/path/to/project/api/src/services/posts/posts.test.js": "import { posts } from './posts'

describe('posts', () => {
  it('returns true', () => {
    expect(true).toBe(true)
  })
})
",
  "/path/to/project/web/src/components/EditPostCell/EditPostCell.js": "import { useMutation } from '@redwoodjs/web'
import { navigate, routes } from '@redwoodjs/router'
import PostForm from 'src/components/PostForm'

export const QUERY = gql\`
  query FIND_POST_BY_ID($id: Int!) {
    post: post(id: $id) {
      id
      title
      slug
      author
      body
      image
      tags
      postedAt
    }
  }
\`
const UPDATE_POST_MUTATION = gql\`
  mutation UpdatePostMutation($id: Int!, $input: PostInput!) {
    updatePost(id: $id, input: $input) {
      id
    }
  }
\`

export const Loading = () => <div>Loading...</div>

export const Success = ({ post }) => {
  const [updatePost, { loading, error }] = useMutation(UPDATE_POST_MUTATION, {
    onCompleted: () => {
      navigate(routes.posts())
    },
  })

  const onSave = (input, id) => {
    updatePost({ variables: { id, input } })
  }

  return (
    <div className=\\"bg-white border rounded-lg overflow-hidden\\">
      <header className=\\"bg-gray-300 text-gray-700 py-3 px-4\\">
        <h2 className=\\"text-sm font-semibold\\">Edit Post {post.id}</h2>
      </header>
      <div className=\\"bg-gray-100 p-4\\">
        <PostForm post={post} onSave={onSave} error={error} loading={loading} />
      </div>
    </div>
  )
}
",
  "/path/to/project/web/src/components/NewPost/NewPost.js": "import { useMutation } from '@redwoodjs/web'
import { navigate, routes } from '@redwoodjs/router'
import PostForm from 'src/components/PostForm'

const CREATE_POST_MUTATION = gql\`
  mutation CreatePostMutation($input: PostInput!) {
    createPost(input: $input) {
      id
    }
  }
\`

const NewPost = () => {
  const [createPost, { loading, error }] = useMutation(CREATE_POST_MUTATION, {
    onCompleted: () => {
      navigate(routes.posts())
    },
  })

  const onSave = (input) => {
    createPost({ variables: { input } })
  }

  return (
    <div className=\\"bg-white border rounded-lg overflow-hidden\\">
      <header className=\\"bg-gray-300 text-gray-700 py-3 px-4\\">
        <h2 className=\\"text-sm font-semibold\\">New Post</h2>
      </header>
      <div className=\\"bg-gray-100 p-4\\">
        <PostForm onSave={onSave} loading={loading} error={error} />
      </div>
    </div>
  )
}

export default NewPost
",
  "/path/to/project/web/src/components/Post/Post.js": "import { useMutation } from '@redwoodjs/web'
import { Link, routes, navigate } from '@redwoodjs/router'

const DELETE_POST_MUTATION = gql\`
  mutation DeletePostMutation($id: Int!) {
    deletePost(id: $id) {
      id
    }
  }
\`

const Post = ({ post }) => {
  const [deletePost] = useMutation(DELETE_POST_MUTATION, {
    onCompleted: () => {
      navigate(routes.posts())
      location.reload()
    },
  })

  const onDeleteClick = (id) => {
    if (confirm('Are you sure you want to delete post ' + id + '?')) {
      deletePost({ variables: { id } })
    }
  }

  return (
    <>
      <div className=\\"bg-white border rounded-lg overflow-hidden\\">
        <header className=\\"bg-gray-300 text-gray-700 py-3 px-4\\">
          <h2 className=\\"text-sm font-semibold\\">Post {post.id} Detail</h2>
        </header>
        <table className=\\"w-full text-sm\\">
          <tbody>
            <tr className=\\"odd:bg-gray-100 even:bg-white border-t\\">
              <td className=\\"font-semibold p-3 text-right md:w-1/5\\">id</td>
              <td className=\\"p-3\\">{post.id}</td>
            </tr>
            <tr className=\\"odd:bg-gray-100 even:bg-white border-t\\">
              <td className=\\"font-semibold p-3 text-right md:w-1/5\\">title</td>
              <td className=\\"p-3\\">{post.title}</td>
            </tr>
            <tr className=\\"odd:bg-gray-100 even:bg-white border-t\\">
              <td className=\\"font-semibold p-3 text-right md:w-1/5\\">slug</td>
              <td className=\\"p-3\\">{post.slug}</td>
            </tr>
            <tr className=\\"odd:bg-gray-100 even:bg-white border-t\\">
              <td className=\\"font-semibold p-3 text-right md:w-1/5\\">author</td>
              <td className=\\"p-3\\">{post.author}</td>
            </tr>
            <tr className=\\"odd:bg-gray-100 even:bg-white border-t\\">
              <td className=\\"font-semibold p-3 text-right md:w-1/5\\">body</td>
              <td className=\\"p-3\\">{post.body}</td>
            </tr>
            <tr className=\\"odd:bg-gray-100 even:bg-white border-t\\">
              <td className=\\"font-semibold p-3 text-right md:w-1/5\\">image</td>
              <td className=\\"p-3\\">{post.image}</td>
            </tr>
            <tr className=\\"odd:bg-gray-100 even:bg-white border-t\\">
              <td className=\\"font-semibold p-3 text-right md:w-1/5\\">tags</td>
              <td className=\\"p-3\\">{post.tags}</td>
            </tr>
            <tr className=\\"odd:bg-gray-100 even:bg-white border-t\\">
              <td className=\\"font-semibold p-3 text-right md:w-1/5\\">postedAt</td>
              <td className=\\"p-3\\">{post.postedAt}</td>
            </tr>
            
          </tbody>
        </table>
      </div>
      <nav className=\\"my-4 mx-2 text-center\\">
        <ul>
          <li className=\\"inline-block ml-2\\">
            <Link
              to={routes.editPost({ id: post.id })}
              className=\\"text-xs bg-blue-600 text-white hover:bg-blue-700 rounded px-4 py-2 uppercase font-semibold tracking-wide\\"
            >
              Edit
            </Link>
          </li>
          <li className=\\"inline-block ml-2\\">
            <a
              href=\\"#\\"
              className=\\"text-xs bg-red-600 text-white hover:bg-red-700 rounded px-4 py-2 uppercase font-semibold tracking-wide\\"
              onClick={() => onDeleteClick(post.id)}
            >
              Delete
            </a>
          </li>
        </ul>
      </nav>
    </>
  )
}

export default Post
",
  "/path/to/project/web/src/components/PostCell/PostCell.js": "import Post from 'src/components/Post'

export const QUERY = gql\`
  query FIND_POST_BY_ID($id: Int!) {
    post: post(id: $id) {
      id
      title
      slug
      author
      body
      image
      tags
      postedAt
    }
  }
\`

export const Loading = () => <div>Loading...</div>

export const Empty = () => <div>Post not found</div>

export const Success = ({ post }) => {
  return <Post post={post} />
}
",
  "/path/to/project/web/src/components/PostForm/PostForm.js": "import {
  Form,
  FormError,
  FieldError,
  Label,
  TextField,
  Submit,
} from '@redwoodjs/web'

const CSS = {
  label: 'block mt-6 text-gray-700 font-semibold',
  labelError: 'block mt-6 font-semibold text-red-700',
  input:
    'block mt-2 w-full p-2 border border-gray-300 text-gray-700 rounded focus:outline-none focus:border-gray-500',
  inputError:
    'block mt-2 w-full p-2 border border-red-700 text-red-900 rounded focus:outline-none',
  errorMessage: 'block mt-1 font-semibold uppercase text-xs text-red-700',
}

const PostForm = (props) => {
  const onSubmit = (data) => {
    props.onSave(data, props?.post?.id)
  }

  return (
    <div className=\\"box-border text-sm -mt-4\\">
      <Form onSubmit={onSubmit} error={props.error}>
        <FormError
          error={props.error}
          wrapperClassName=\\"p-4 bg-red-100 text-red-700 border border-red-300 rounded mt-4 mb-4\\"
          titleClassName=\\"mt-0 font-semibold\\"
          listClassName=\\"mt-2 list-disc list-inside\\"
        />

        <Label
          name=\\"title\\"
          className={CSS.label}
          errorClassName={CSS.labelError}
        />
        <TextField
          name=\\"title\\"
          defaultValue={props.post?.title}
          className={CSS.input}
          errorClassName={CSS.inputError}
          validation={{ required: true }}
        />
        <FieldError name=\\"title\\" className={CSS.errorMessage} />

        <Label
          name=\\"slug\\"
          className={CSS.label}
          errorClassName={CSS.labelError}
        />
        <TextField
          name=\\"slug\\"
          defaultValue={props.post?.slug}
          className={CSS.input}
          errorClassName={CSS.inputError}
          validation={{ required: true }}
        />
        <FieldError name=\\"slug\\" className={CSS.errorMessage} />

        <Label
          name=\\"author\\"
          className={CSS.label}
          errorClassName={CSS.labelError}
        />
        <TextField
          name=\\"author\\"
          defaultValue={props.post?.author}
          className={CSS.input}
          errorClassName={CSS.inputError}
          validation={{ required: true }}
        />
        <FieldError name=\\"author\\" className={CSS.errorMessage} />

        <Label
          name=\\"body\\"
          className={CSS.label}
          errorClassName={CSS.labelError}
        />
        <TextField
          name=\\"body\\"
          defaultValue={props.post?.body}
          className={CSS.input}
          errorClassName={CSS.inputError}
          validation={{ required: true }}
        />
        <FieldError name=\\"body\\" className={CSS.errorMessage} />

        <Label
          name=\\"image\\"
          className={CSS.label}
          errorClassName={CSS.labelError}
        />
        <TextField
          name=\\"image\\"
          defaultValue={props.post?.image}
          className={CSS.input}
          errorClassName={CSS.inputError}
          validation={{ required: true }}
        />
        <FieldError name=\\"image\\" className={CSS.errorMessage} />

        <Label
          name=\\"tags\\"
          className={CSS.label}
          errorClassName={CSS.labelError}
        />
        <TextField
          name=\\"tags\\"
          defaultValue={props.post?.tags}
          className={CSS.input}
          errorClassName={CSS.inputError}
          validation={{ required: true }}
        />
        <FieldError name=\\"tags\\" className={CSS.errorMessage} />

        <Label
          name=\\"postedAt\\"
          className={CSS.label}
          errorClassName={CSS.labelError}
        />
        <TextField
          name=\\"postedAt\\"
          defaultValue={props.post?.postedAt}
          className={CSS.input}
          errorClassName={CSS.inputError}
          validation={{ required: true }}
        />
        <FieldError name=\\"postedAt\\" className={CSS.errorMessage} />

        <div className=\\"mt-8 text-center\\">
          <Submit
            disabled={props.loading}
            className=\\"bg-blue-600 text-white hover:bg-blue-700 text-xs rounded px-4 py-2 uppercase font-semibold tracking-wide\\"
          >
            Save
          </Submit>
        </div>
      </Form>
    </div>
  )
}

export default PostForm
",
  "/path/to/project/web/src/components/Posts/Posts.js": "import { useMutation } from '@redwoodjs/web'
import { Link, routes } from '@redwoodjs/router'

const DELETE_POST_MUTATION = gql\`
  mutation DeletePostMutation($id: Int!) {
    deletePost(id: $id) {
      id
    }
  }
\`

const MAX_STRING_LENGTH = 150

const truncate = (text) => {
  let output = text
  if (text.length > MAX_STRING_LENGTH) {
    output = output.substring(0, MAX_STRING_LENGTH) + '...'
  }
  return output
}

const timeTag = (datetime) => {
  return (
    <time dateTime={datetime} title={datetime}>
      {new Date(datetime).toUTCString()}
    </time>
  )
}

const PostsList = ({ posts }) => {
  const [deletePost] = useMutation(DELETE_POST_MUTATION, {
    onCompleted: () => {
      location.reload()
    },
  })

  const onDeleteClick = (id) => {
    if (confirm('Are you sure you want to delete post ' + id + '?')) {
      deletePost({ variables: { id } })
    }
  }

  return (
    <div className=\\"bg-white text-gray-900 border rounded-lg overflow-x-scroll\\">
      <table className=\\"table-auto w-full min-w-3xl text-sm\\">
        <thead>
          <tr className=\\"bg-gray-300 text-gray-700\\">
            <th className=\\"font-semibold text-left p-3\\">id</th>
            <th className=\\"font-semibold text-left p-3\\">title</th>
            <th className=\\"font-semibold text-left p-3\\">slug</th>
            <th className=\\"font-semibold text-left p-3\\">author</th>
            <th className=\\"font-semibold text-left p-3\\">body</th>
            <th className=\\"font-semibold text-left p-3\\">image</th>
            <th className=\\"font-semibold text-left p-3\\">tags</th>
            <th className=\\"font-semibold text-left p-3\\">postedAt</th>
            <th className=\\"font-semibold text-left p-3\\">&nbsp;</th>
          </tr>
        </thead>
        <tbody>
          {posts.map((post) => (
            <tr
              key={post.id}
              className=\\"odd:bg-gray-100 even:bg-white border-t\\"
            >
              <td className=\\"p-3\\">{truncate(post.id)}</td>
              <td className=\\"p-3\\">{truncate(post.title)}</td>
              <td className=\\"p-3\\">{truncate(post.slug)}</td>
              <td className=\\"p-3\\">{truncate(post.author)}</td>
              <td className=\\"p-3\\">{truncate(post.body)}</td>
              <td className=\\"p-3\\">{truncate(post.image)}</td>
              <td className=\\"p-3\\">{truncate(post.tags)}</td>
              <td className=\\"p-3\\">{timeTag(post.postedAt)}</td>
              <td className=\\"p-3 pr-4 text-right whitespace-no-wrap\\">
                <nav>
                  <ul>
                    <li className=\\"inline-block\\">
                      <Link
                        to={routes.post({ id: post.id })}
                        title={'Show post ' + post.id + ' detail'}
                        className=\\"text-xs bg-gray-100 text-gray-600 hover:bg-gray-600 hover:text-white rounded-sm px-2 py-1 uppercase font-semibold tracking-wide\\"
                      >
                        Show
                      </Link>
                    </li>
                    <li className=\\"inline-block\\">
                      <Link
                        to={routes.editPost({ id: post.id })}
                        title={'Edit post ' + post.id}
                        className=\\"text-xs bg-gray-100 text-blue-600 hover:bg-blue-600 hover:text-white rounded-sm px-2 py-1 uppercase font-semibold tracking-wide\\"
                      >
                        Edit
                      </Link>
                    </li>
                    <li className=\\"inline-block\\">
                      <a
                        href=\\"#\\"
                        title={'Delete post ' + post.id}
                        className=\\"text-xs bg-gray-100 text-red-600 hover:bg-red-600 hover:text-white rounded-sm px-2 py-1 uppercase font-semibold tracking-wide\\"
                        onClick={() => onDeleteClick(post.id)}
                      >
                        Delete
                      </a>
                    </li>
                  </ul>
                </nav>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  )
}

export default PostsList
",
  "/path/to/project/web/src/components/PostsCell/PostsCell.js": "import { Link, routes } from '@redwoodjs/router'

import Posts from 'src/components/Posts'

export const QUERY = gql\`
  query POSTS {
    posts {
      id
      title
      slug
      author
      body
      image
      tags
      postedAt
    }
  }
\`

export const beforeQuery = (props) => {
  return { variables: props, fetchPolicy: 'cache-and-network' }
}

export const Loading = () => <div>Loading...</div>

export const Empty = () => {
  return (
    <div className=\\"text-center\\">
      {'No posts yet. '}
      <Link
        to={routes.newPost()}
        className=\\"text-blue-500 underline hover:text-blue-700\\"
      >
        {'Create one?'}
      </Link>
    </div>
  )
}

export const Success = ({ posts }) => {
  return <Posts posts={posts} />
}
",
  "/path/to/project/web/src/layouts/PostsLayout/PostsLayout.js": "import { Link, routes } from '@redwoodjs/router'

const PostsLayout = (props) => {
  return (
    <div className=\\"rw-scaffold\\">
      <div className=\\"bg-white font-sans\\">
        <header className=\\"flex justify-between py-4 px-8\\">
          <h1 className=\\"text-xl font-semibold\\">
            <Link
              to={routes.posts()}
              className=\\"text-gray-700 hover:text-gray-900 hover:underline\\"
            >
              Posts
            </Link>
          </h1>
          <Link
            to={routes.newPost()}
            className=\\"flex bg-green-500 hover:bg-green-600 text-white text-xs font-semibold px-3 py-1 uppercase tracking-wide rounded\\"
          >
            <div className=\\"text-xl leading-none\\">+</div>
            <div className=\\"ml-1 leading-loose\\">New Post</div>
          </Link>
        </header>
        <main className=\\"mx-4 pb-4\\">{props.children}</main>
      </div>
    </div>
  )
}

export default PostsLayout
",
  "/path/to/project/web/src/pages/EditPostPage/EditPostPage.js": "import PostsLayout from 'src/layouts/PostsLayout'
import EditPostCell from 'src/components/EditPostCell'

const EditPostPage = ({ id }) => {
  return (
    <PostsLayout>
      <EditPostCell id={id} />
    </PostsLayout>
  )
}

export default EditPostPage
",
  "/path/to/project/web/src/pages/NewPostPage/NewPostPage.js": "import PostsLayout from 'src/layouts/PostsLayout'
import NewPost from 'src/components/NewPost'

const NewPostPage = () => {
  return (
    <PostsLayout>
      <NewPost />
    </PostsLayout>
  )
}

export default NewPostPage
",
  "/path/to/project/web/src/pages/PostPage/PostPage.js": "import PostsLayout from 'src/layouts/PostsLayout'
import PostCell from 'src/components/PostCell'

const PostPage = ({ id }) => {
  return (
    <PostsLayout>
      <PostCell id={id} />
    </PostsLayout>
  )
}

export default PostPage
",
  "/path/to/project/web/src/pages/PostsPage/PostsPage.js": "import PostsLayout from 'src/layouts/PostsLayout'
import PostsCell from 'src/components/PostsCell'

const PostsPage = () => {
  return (
    <PostsLayout>
      <PostsCell />
    </PostsLayout>
  )
}

export default PostsPage
",
  "/path/to/project/web/src/scaffold.css": "/*
  This file was created automatically as the result of the scaffold generator.
  If you decide to use TailwindCSS in your project then you can safely delete
  this file, but first remove the <div className=\\"rw-scaffold\\"> from the Layout
  that your scaffold is wrapped in. Check the comment blocks below for a
  couple of config options you'll need to add to Tailwind to preserve the
  scaffold appearance.

  If you don't use Tailwind then you should keep it here until you have
  completely converted your scaffolded pages or removed them, or if you don't
  mind your scaffolded pages being monumentally ugly.
*/

/*
  normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css
*/

.rw-scaffold main{display:block}
.rw-scaffold h1{font-size:2em;margin:.67em 0}
.rw-scaffold a{background-color:transparent}
.rw-scaffold input{font-family:inherit;font-size:100%;line-height:1.15;margin:0}
.rw-scaffold input{overflow:visible}
.rw-scaffold *,.rw-scaffold ::after,.rw-scaffold ::before{box-sizing:inherit}
.rw-scaffold h1,.rw-scaffold h2{margin:0}
.rw-scaffold ul{list-style:none;margin:0;padding:0}
.rw-scaffold *,.rw-scaffold ::after,.rw-scaffold ::before{border-width:0;border-style:solid;border-color:#e2e8f0}
.rw-scaffold input:-ms-input-placeholder{color:#a0aec0}
.rw-scaffold input::-ms-input-placeholder{color:#a0aec0}
.rw-scaffold input::placeholder{color:#a0aec0}
.rw-scaffold table{border-collapse:collapse}
.rw-scaffold h1,.rw-scaffold .rw-scaffold h2{font-size:inherit;font-weight:inherit}
.rw-scaffold a{color:inherit;text-decoration:inherit}
.rw-scaffold input{padding:0;line-height:inherit;color:inherit}

/*
  Classes we use in scaffolds from TailwindCSS v1.1.4
*/

.rw-scaffold .bg-white{background-color:#fff}
.rw-scaffold .bg-gray-100{background-color:#f7fafc}
.rw-scaffold .bg-gray-300{background-color:#e2e8f0}
.rw-scaffold .bg-red-100{background-color:#fff5f5}
.rw-scaffold .bg-red-600{background-color:#e53e3e}
.rw-scaffold .bg-green-500{background-color:#48bb78}
.rw-scaffold .bg-blue-600{background-color:#3182ce}
.rw-scaffold .hover\\\\:bg-gray-600:hover{background-color:#718096}
.rw-scaffold .hover\\\\:bg-red-600:hover{background-color:#e53e3e}
.rw-scaffold .hover\\\\:bg-red-700:hover{background-color:#c53030}
.rw-scaffold .hover\\\\:bg-green-600:hover{background-color:#38a169}
.rw-scaffold .hover\\\\:bg-blue-600:hover{background-color:#3182ce}
.rw-scaffold .hover\\\\:bg-blue-700:hover{background-color:#2b6cb0}
.rw-scaffold .border-gray-300{border-color:#e2e8f0}
.rw-scaffold .border-red-300{border-color:#feb2b2}
.rw-scaffold .border-red-700{border-color:#c53030}
.rw-scaffold .focus\\\\:border-gray-500:focus{border-color:#a0aec0}
.rw-scaffold .rounded-sm{border-radius:.125rem}
.rw-scaffold .rounded{border-radius:.25rem}
.rw-scaffold .rounded-lg{border-radius:.5rem}
.rw-scaffold .border{border-width:1px}
.rw-scaffold .border-t{border-top-width:1px}
.rw-scaffold .block{display:block}
.rw-scaffold .inline-block{display:inline-block}
.rw-scaffold .flex{display:flex}
.rw-scaffold .table{display:table}
.rw-scaffold .justify-between{justify-content:space-between}
.rw-scaffold .font-sans{font-family:-apple-system,BlinkMacSystemFont,\\"Segoe UI\\",Roboto,\\"Helvetica Neue\\",Arial,\\"Noto Sans\\",sans-serif,\\"Apple Color Emoji\\",\\"Segoe UI Emoji\\",\\"Segoe UI Symbol\\",\\"Noto Color Emoji\\"}
.rw-scaffold .font-semibold{font-weight:600}
.rw-scaffold .leading-none{line-height:1}
.rw-scaffold .leading-loose{line-height:2}
.rw-scaffold .list-inside{list-style-position:inside}
.rw-scaffold .list-disc{list-style-type:disc}
.rw-scaffold .mx-2{margin-left:.5rem;margin-right:.5rem}
.rw-scaffold .my-4{margin-top:1rem;margin-bottom:1rem}
.rw-scaffold .mx-4{margin-left:1rem;margin-right:1rem}
.rw-scaffold .mt-0{margin-top:0}
.rw-scaffold .mt-1{margin-top:.25rem}
.rw-scaffold .ml-1{margin-left:.25rem}
.rw-scaffold .mt-2{margin-top:.5rem}
.rw-scaffold .ml-2{margin-left:.5rem}
.rw-scaffold .mt-4{margin-top:1rem}
.rw-scaffold .mb-4{margin-bottom:1rem}
.rw-scaffold .mt-6{margin-top:1.5rem}
.rw-scaffold .mt-8{margin-top:2rem}
.rw-scaffold .-mt-4{margin-top:-1rem}
.rw-scaffold .focus\\\\:outline-none:focus{outline:0}
.rw-scaffold .overflow-hidden{overflow:hidden}
.rw-scaffold .overflow-x-scroll{overflow-x:scroll}
.rw-scaffold .p-2{padding:.5rem}
.rw-scaffold .p-3{padding:.75rem}
.rw-scaffold .p-4{padding:1rem}
.rw-scaffold .py-1{padding-top:.25rem;padding-bottom:.25rem}
.rw-scaffold .py-2{padding-top:.5rem;padding-bottom:.5rem}
.rw-scaffold .px-2{padding-left:.5rem;padding-right:.5rem}
.rw-scaffold .py-3{padding-top:.75rem;padding-bottom:.75rem}
.rw-scaffold .px-3{padding-left:.75rem;padding-right:.75rem}
.rw-scaffold .py-4{padding-top:1rem;padding-bottom:1rem}
.rw-scaffold .px-4{padding-left:1rem;padding-right:1rem}
.rw-scaffold .px-8{padding-left:2rem;padding-right:2rem}
.rw-scaffold .pr-4{padding-right:1rem}
.rw-scaffold .pb-4{padding-bottom:1rem}
.rw-scaffold .table-auto{table-layout:auto}
.rw-scaffold .text-left{text-align:left}
.rw-scaffold .text-center{text-align:center}
.rw-scaffold .text-right{text-align:right}
.rw-scaffold .text-white{color:#fff}
.rw-scaffold .text-gray-600{color:#718096}
.rw-scaffold .text-gray-700{color:#4a5568}
.rw-scaffold .text-gray-900{color:#1a202c}
.rw-scaffold .text-red-600{color:#e53e3e}
.rw-scaffold .text-red-700{color:#c53030}
.rw-scaffold .text-red-900{color:#742a2a}
.rw-scaffold .text-blue-500{color:#4299e1}
.rw-scaffold .text-blue-600{color:#3182ce}
.rw-scaffold .hover\\\\:text-white:hover{color:#fff}
.rw-scaffold .hover\\\\:text-gray-900:hover{color:#1a202c}
.rw-scaffold .hover\\\\:text-blue-700:hover{color:#2b6cb0}
.rw-scaffold .text-xs{font-size:.75rem}
.rw-scaffold .text-sm{font-size:.875rem}
.rw-scaffold .text-xl{font-size:1.25rem}
.rw-scaffold .uppercase{text-transform:uppercase}
.rw-scaffold .underline{text-decoration:underline}
.rw-scaffold .hover\\\\:underline:hover{text-decoration:underline}
.rw-scaffold .tracking-wide{letter-spacing:.025em}
.rw-scaffold .whitespace-no-wrap{white-space:nowrap}
.rw-scaffold .truncate{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}
.rw-scaffold .w-full{width:100%}
.rw-scaffold .box-border{box-sizing:border-box}
@media (min-width:768px) {
  .rw-scaffold .md\\\\:w-1\\\\/5{width:20%}
}

/*
  Here are variants (:odd, :even) that aren't enabled in Tailwind by default.
  If you decide to include Tailwind yourself and still want scaffolds to look
  the same then you can tell it to build these variants by adding the following
  to tailwind.config.js:

    module.exports = {
      variants: {
        backgroundColor: ['hover', 'focus', 'odd', 'even']
      }
    }

  Tailwind variant customization docs: https://tailwindcss.com/docs/configuring-variants
*/

.rw-scaffold .odd\\\\:bg-gray-100:nth-child(odd) {background-color: #f7fafc}
.rw-scaffold .even\\\\:bg-white:nth-child(even) {background-color: #ffffff;}

/*
  Any custom styles that Tailwind doesn't provide. You can add these to your
  own install of Tailwind by adding the following to tailwind.config.js:

    module.exports = {
      theme: {
        extend: {
          minWidth: {
            '3xl': '48rem'
          }
        }
      }
    }

  Tailwind theme extension docs: https://tailwindcss.com/docs/theme#extending-the-default-theme
*/

.rw-scaffold .min-w-3xl {min-width: 48rem}
",
}
`;

exports[`generate sdl files 1`] = `
Array [
  "/path/to/project/api/src/graphql/posts.sdl.js",
]
`;

exports[`generate sdl files 2`] = `
Object {
  "/path/to/project/api/src/graphql/posts.sdl.js": "export const schema = gql\`
  type Post {
    id: Int!
    title: String!
    slug: String!
    author: String!
    body: String!
    image: String
    tags: Tag
    postedAt: DateTime
  }

  type Query {
    posts: [Post]
    post(id: Int!): Post
  }

  input PostInput {
    title: String
    slug: String
    author: String
    body: String
    image: String
    postedAt: DateTime
  }

  type Mutation {
    createPost(input: PostInput!): Post
    updatePost(id: Int!, input: PostInput!): Post
    deletePost(id: Int!): Post
  }
\`
",
}
`;

exports[`generate services files 1`] = `
Object {
  "/path/to/project/api/src/services/users/users.js": "import { db } from 'src/lib/db'

export const users = () => {
  return db.user.findMany()
}

export const user = ({ id }) => {
  return db.user.findOne({
    where: { id },
  })
}

export const createUser = ({ input }) => {
  return db.user.create({
    data: input,
  })
}

export const updateUser = ({ id, input }) => {
  return db.user.update({
    data: input,
    where: { id },
  })
}

export const deleteUser = ({ id }) => {
  return db.user.delete({
    where: { id },
  })
}
",
  "/path/to/project/api/src/services/users/users.test.js": "import { users } from './users'

describe('users', () => {
  it('returns true', () => {
    expect(true).toBe(true)
  })
})
",
}
`;
